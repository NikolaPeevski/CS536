/**********************************************************************
 Grammar for Carrot programs
 **********************************************************************/
program         ::= declList
                ;

declList        ::= declList decl
                | /* epsilon */
                ;

decl            ::= varDecl
                | fnDecl
                | structDecl     // struct definitions only at top level
                ;

varDeclList     ::= varDeclList varDecl
                | /* epsilon */
                ;

varDecl         ::= type id SEMICOLON
                | STRUCT id id SEMICOLON
                ;

fnDecl          ::= type id formals fnBody
                ;
                
structDecl      ::= STRUCT id LCURLY structBody RCURLY SEMICOLON
                ;
                
structBody      ::= structBody varDecl
                | varDecl
                ;
                
formals         ::= LPAREN RPAREN /* DONE*/
                | LPAREN formalsList RPAREN /* DONE*/
                ;

formalsList     ::= formalDecl
                | formalDecl COMMA formalsList
                ;

formalDecl      ::= type id        // note: no struct parameters
                ;

fnBody          ::= LCURLY varDeclList stmtList RCURLY  /* DONE*/
                ;

stmtList        ::= stmtList stmt /* DONE*/
                | /* epsilon */ /* DONE*/
                ;

stmt            ::= assignExp SEMICOLON /* DONE*/
                | loc PLUSPLUS SEMICOLON /* DONE*/
                | loc MINUSMINUS SEMICOLON /* DONE*/
                | CIN READ loc SEMICOLON /* DONE*/
                | COUT WRITE exp SEMICOLON /* DONE*/
                | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY /* DONE*/
                | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY /* DONE*/
                | WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY /* DONE*/
		        | REPEAT LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
                | RETURN exp SEMICOLON
                | RETURN SEMICOLON
                | fncall SEMICOLON
                ;

assignExp       ::= loc ASSIGN exp /* DONE*/
                ;
                
exp             ::= assignExp /* DONE*/
                | exp PLUS exp /* DONE*/
                | exp MINUS exp /* DONE*/
                | exp TIMES exp /* DONE*/
                | exp DIVIDE exp /* DONE*/
                | NOT exp /* DONE*/
                | exp AND exp /* DONE*/
                | exp OR exp /* DONE*/
                | exp EQUALS exp /* DONE*/
                | exp NOTEQUALS exp /* DONE*/
                | exp LESS exp /* DONE*/
                | exp GREATER exp /* DONE*/
                | exp LESSEQ exp /* DONE*/
                | exp GREATEREQ exp /* DONE*/
                | MINUS term /* DONE*/
                | term /* DONE*/
                ;

term            ::= loc
                | INTLITERAL /* DONE*/
                | STRINGLITERAL /* DONE*/
                | TRUE /* DONE*/
                | FALSE /* DONE*/
                | LPAREN exp RPAREN /* DONE*/
                | fncall
                ;

fncall          ::=  id LPAREN RPAREN   // fn call with no args
                | id LPAREN actualList RPAREN  // with args
                ;

actualList      ::= exp
                | actualList COMMA exp
                ;

type            ::= INT /* DONE*/
                | BOOL /* DONE*/
                | VOID /* DONE*/
                ;

loc             ::= id /* DONE*/
                | loc DOT id /* DONE*/

id              ::= ID /* DONE*/
                ;


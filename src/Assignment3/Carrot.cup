/**********************************************************************
 Java CUP specification for a parser for Carrot programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:
public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		        REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */

non terminal ProgramNode      program;

non terminal LinkedList       declList;
non terminal DeclNode         decl;

non terminal VarDeclNode      varDecl;

non terminal FnDeclNode       fnDecl;
non terminal FnBodyNode       fnBody;

non terminal StructDeclNode   structDecl;
non terminal LinkedList       structBody;

non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FormalsListNode  formals;

non terminal LinkedList       varDeclList;
non terminal LinkedList       stmtList;

non terminal StmtNode         stmt;

non terminal AssignNode    assignExp;
non terminal ExpNode          loc;
non terminal ExpNode          exp;
non terminal CallExpNode       fncall;

non terminal LinkedList   actualList;

non terminal TypeNode         type;
non terminal IdNode           id;

non terminal ExpNode         term;
 
/* NOTE: Add precedence and associativity declarations here */
//precedence right

//BOOLEAN PRECEDENCE

//BINARY
//maybe left instead of nonassoc?
precedence right ASSIGN;
precedence nonassoc OR;
precedence nonassoc AND;
precedence nonassoc EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ,GREATEREQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc NOT;

//RELATIONAL PRECEDENCE
//EQUALITY



start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                | error
                {:
                    parser.report_error("class_declarations","WRONG");
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;
varDeclList        ::= varDeclList:dl varDecl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<VarDeclNode>();
                :}
                ;
stmtList        ::= stmtList:stL stmt:st
                {: stL.addLast(st);
                   RESULT = stL;
                :}
                |
                {:
                    RESULT = new LinkedList<StmtListNode>();
                :};

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | fnDecl:fn /* function decl*/
                {: RESULT = fn;
                :}
                | structDecl:sd
                {: RESULT = sd;
                :}
                ;
structDecl      ::= STRUCT id:i1 LCURLY structBody:sb RCURLY SEMICOLON
                {: RESULT = new StructDeclNode(i1, new DeclListNode(sb));
                :}
                ;

structBody      ::= structBody:sb varDecl:vD
                {:  sb.addLast(vD);
                    RESULT = sb;
                :}
                | varDecl:vb
                {: RESULT = new LinkedList<DeclNode>(Arrays.asList(vb));
                :}
                ;

fnDecl          ::= type:t id:id formals:fm fnBody:fnB
                {: RESULT = new FnDeclNode(t, id, fm, fnB);
                :}
                ;
fncall          ::= id:i LPAREN RPAREN
                {: RESULT = new CallExpNode(i, new ExpListNode(null));
                :}
                | id:i LPAREN actualList:aL RPAREN
                {: RESULT = new CallExpNode(i, new ExpListNode(aL));
                :}
                ;
actualList      ::= exp:exp
                {: RESULT = new LinkedList<ExpNode>(Arrays.asList(exp));
                :}
                | actualList:al COMMA exp:e
                {:  al.addLast(e);
                    RESULT = al;
                :}
                ;

formals         ::= LPAREN RPAREN
                {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                | LPAREN formalsList:fm RPAREN
                {: RESULT = new FormalsListNode(fm);
                :}
                ;
formalsList     ::= formalDecl:fmD
                {: RESULT = new LinkedList<FormalDeclNode>(Arrays.asList(fmD));
                :}
                | formalDecl:fmD COMMA formalsList:fL
                {:  fL.push(fmD);
                    RESULT = fL;
                :}
                ;

formalDecl      ::= type:t id:d
                {: RESULT = new FormalDeclNode(t, d);
                :}
                ;


fnBody          ::= LCURLY varDeclList:vD stmtList:stmtL RCURLY
                {: RESULT = new FnBodyNode(new DeclListNode(vD), new StmtListNode(stmtL));
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:id1 id:id2 SEMICOLON
                {: RESULT = new VarDeclNode(new StructNode(id1),id2, 0);
                :}
                ;

stmt            ::= assignExp:ae SEMICOLON
                {: RESULT = new AssignStmtNode(ae);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {: RESULT = new PostDecStmtNode(l);
                :}
                | CIN READ loc:l SEMICOLON
                {: RESULT = new ReadStmtNode(l);
                :}
                | COUT WRITE exp:exp SEMICOLON
                {: RESULT = new WriteStmtNode(exp);
                :}
                | IF LPAREN exp:exp1 RPAREN LCURLY varDeclList:vD stmtList:stmtL RCURLY
                {: RESULT = new IfStmtNode(exp1, new DeclListNode(vD), new StmtListNode(stmtL));
                :}
                | IF LPAREN exp:exp1 RPAREN LCURLY varDeclList:vD1 stmtList:stmtL1 RCURLY ELSE LCURLY declList:vD2 stmtList:stmtL2 RCURLY
                {: RESULT = new IfElseStmtNode(exp1,
                        new DeclListNode(vD1), new StmtListNode(stmtL1),
                        new DeclListNode(vD2), new StmtListNode(stmtL2));
                :}
                | WHILE LPAREN exp:exp1 RPAREN LCURLY varDeclList:vD stmtList:stmtL RCURLY
                {: RESULT = new WhileStmtNode(exp1, new DeclListNode(vD), new StmtListNode(stmtL));
                :}
                | REPEAT LPAREN exp:exp1 RPAREN LCURLY varDeclList:vD stmtList:stmtL RCURLY
                {: RESULT = new RepeatStmtNode(exp1, new DeclListNode(vD), new StmtListNode(stmtL));
                :}
                | RETURN exp:exp SEMICOLON
                {: RESULT = new ReturnStmtNode(exp);
                :}
                | RETURN SEMICOLON
                {: RESULT = new ReturnStmtNode(null);
                :}
                | fncall:call SEMICOLON
                {: RESULT = new CallStmtNode(call);
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:ex
                {: RESULT = new AssignNode(l, ex);
                :}
                ;

loc             ::= id:i
                {: RESULT = i;
                :}
                | loc:l DOT id:i
                {: RESULT = new DotAccessExpNode(l, i);
                :}
                ;
exp             ::= term:t
                {: RESULT = t;
                :}
                | exp: exp1 PLUS exp: exp2
                {: RESULT = new PlusNode(exp1, exp2);
                :}
                | exp: exp1 MINUS exp: exp2
                {: RESULT = new MinusNode(exp1, exp2);
                :}
                | exp: exp1 TIMES exp: exp2
                {: RESULT = new TimesNode(exp1, exp2);
                :}
                | exp: exp1 DIVIDE exp: exp2
                {: RESULT = new DivideNode(exp1, exp2);
                :}
                | NOT exp:e
                {: RESULT = new NotNode(e);
                :}
                | exp:exp1 AND exp:exp2
                {: RESULT = new AndNode(exp1,exp2);
                :}
                | exp:exp1 OR exp:exp2
                {: RESULT = new OrNode(exp1,exp2);
                :}
                | exp:exp1 NOTEQUALS exp:exp2
                {: RESULT = new NotEqualsNode(exp1,exp2);
                :}
                | exp:exp1 EQUALS exp:exp2
                {: RESULT = new EqualsNode(exp1,exp2);
                :}
                | exp:exp1 LESS exp:exp2
                {: RESULT = new LessNode(exp1,exp2);
                :}
                | exp:exp1 GREATER exp:exp2
                {: RESULT = new GreaterNode(exp1,exp2);
                :}
                | exp:exp1 LESSEQ exp:exp2
                {: RESULT = new LessEqNode(exp1,exp2);
                :}
                | exp:exp1 GREATEREQ exp:exp2
                {: RESULT = new GreaterEqNode(exp1,exp2);
                :}
                | MINUS exp:e
                {: RESULT = new UnaryMinusNode(e);
                :}
                ;

term            ::= INTLITERAL:i
                {: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                | STRINGLITERAL:s
                {: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {: RESULT = new TrueNode(t.linenum, t.charnum);
                :}
                | FALSE:t
                {: RESULT = new FalseNode(t.linenum, t.charnum);
                :}
                | LPAREN exp:e RPAREN
                {: RESULT = e;
                :}
                | fncall:call
                {: RESULT = call;
                :}
                | loc:l
                {: RESULT = l;
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				

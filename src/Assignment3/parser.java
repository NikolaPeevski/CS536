
//----------------------------------------------------
// The following code was generated by CUP v0.11b ${cupversion} (SVN rev )
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b ${cupversion} (SVN rev ) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\015\004" +
    "\000\002\015\002\000\002\016\004\000\002\016\002\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\010\010\000\002\011\004\000\002\011\003\000\002\006" +
    "\006\000\002\023\005\000\002\023\006\000\002\024\003" +
    "\000\002\024\005\000\002\014\004\000\002\014\005\000" +
    "\002\012\003\000\002\012\005\000\002\013\004\000\002" +
    "\007\006\000\002\005\005\000\002\005\006\000\002\017" +
    "\004\000\002\017\005\000\002\017\005\000\002\017\006" +
    "\000\002\017\006\000\002\017\012\000\002\017\017\000" +
    "\002\017\012\000\002\017\012\000\002\017\005\000\002" +
    "\017\004\000\002\017\004\000\002\020\005\000\002\021" +
    "\003\000\002\021\005\000\002\022\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\004\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\004" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\027\003\000\002" +
    "\027\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\016\002\ufffd\003\006\004\ufffd\005\ufffd\006" +
    "\ufffd\011\ufffd\001\002\000\014\002\000\004\011\005\012" +
    "\006\014\011\013\001\002\000\004\002\007\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002\000\034" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\025\ufff8" +
    "\001\002\000\004\021\uffc0\001\002\000\004\021\uffbf\001" +
    "\002\000\004\021\021\001\002\000\004\021\uffbe\001\002" +
    "\000\004\021\021\001\002\000\034\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\025\ufffe\001\002\000\034\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\025\ufff7\001" +
    "\002\000\034\002\ufff6\004\ufff6\005\ufff6\006\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\025\ufff6\001\002\000\056\021\uffbd\024\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\001" +
    "\002\000\006\026\025\030\023\001\002\000\034\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\025\uffe7\001\002" +
    "\000\004\024\036\001\002\000\012\004\011\005\012\006" +
    "\014\027\026\001\002\000\004\024\uffed\001\002\000\004" +
    "\021\021\001\002\000\004\027\034\001\002\000\006\027" +
    "\uffeb\031\032\001\002\000\010\004\011\005\012\006\014" +
    "\001\002\000\004\027\uffea\001\002\000\004\024\uffec\001" +
    "\002\000\006\027\uffe9\031\uffe9\001\002\000\032\004\ufffb" +
    "\005\ufffb\006\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\025\ufffb\001\002\000\034" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\025\ufff2" +
    "\001\002\000\032\004\011\005\012\006\014\011\042\012" +
    "\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\025\ufff9\001\002\000\004\021\021\001\002\000\004\021" +
    "\021\001\002\000\032\004\ufffc\005\ufffc\006\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\025\ufffc\001\002\000\022\012\057\013\051\014\053" +
    "\016\046\017\045\020\060\021\021\025\056\001\002\000" +
    "\004\026\205\001\002\000\004\026\176\001\002\000\052" +
    "\026\167\027\uffd8\030\uffd8\031\uffd8\032\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\001\002\000\022\012\ufffa\013\ufffa\014\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\025\ufffa\001\002\000\004\033" +
    "\164\001\002\000\012\032\130\035\157\036\156\054\160" +
    "\001\002\000\004\026\142\001\002\000\004\030\141\001" +
    "\002\000\004\030\140\001\002\000\034\002\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\025\uffe8\001\002\000\004" +
    "\034\134\001\002\000\024\007\064\010\066\021\021\022" +
    "\074\023\067\026\073\030\071\040\061\043\072\001\002" +
    "\000\022\007\064\010\066\021\021\022\074\023\067\026" +
    "\073\040\061\043\072\001\002\000\040\027\uffd6\030\uffd6" +
    "\031\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\001\002\000\034\030\132\037\105\040\077\041\110\042" +
    "\100\044\076\045\112\046\111\047\101\050\106\051\103" +
    "\052\102\053\104\001\002\000\040\027\uffc5\030\uffc5\031" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\001" +
    "\002\000\042\027\uffc1\030\uffc1\031\uffc1\032\130\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\001\002\000\040" +
    "\027\uffc4\030\uffc4\031\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\001\002\000\040\027\uffc6\030\uffc6\031" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\001" +
    "\002\000\040\027\uffc2\030\uffc2\031\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\001\002\000\022\012\uffdb" +
    "\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\025" +
    "\uffdb\001\002\000\022\007\064\010\066\021\021\022\074" +
    "\023\067\026\073\040\061\043\072\001\002\000\022\007" +
    "\064\010\066\021\021\022\074\023\067\026\073\040\061" +
    "\043\072\001\002\000\040\027\uffc7\030\uffc7\031\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\001\002\000" +
    "\034\027\107\037\105\040\077\041\110\042\100\044\076" +
    "\045\112\046\111\047\101\050\106\051\103\052\102\053" +
    "\104\001\002\000\022\007\064\010\066\021\021\022\074" +
    "\023\067\026\073\040\061\043\072\001\002\000\022\007" +
    "\064\010\066\021\021\022\074\023\067\026\073\040\061" +
    "\043\072\001\002\000\022\007\064\010\066\021\021\022" +
    "\074\023\067\026\073\040\061\043\072\001\002\000\022" +
    "\007\064\010\066\021\021\022\074\023\067\026\073\040" +
    "\061\043\072\001\002\000\022\007\064\010\066\021\021" +
    "\022\074\023\067\026\073\040\061\043\072\001\002\000" +
    "\022\007\064\010\066\021\021\022\074\023\067\026\073" +
    "\040\061\043\072\001\002\000\022\007\064\010\066\021" +
    "\021\022\074\023\067\026\073\040\061\043\072\001\002" +
    "\000\022\007\064\010\066\021\021\022\074\023\067\026" +
    "\073\040\061\043\072\001\002\000\022\007\064\010\066" +
    "\021\021\022\074\023\067\026\073\040\061\043\072\001" +
    "\002\000\040\027\uffc3\030\uffc3\031\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\001\002\000\022\007\064" +
    "\010\066\021\021\022\074\023\067\026\073\040\061\043" +
    "\072\001\002\000\022\007\064\010\066\021\021\022\074" +
    "\023\067\026\073\040\061\043\072\001\002\000\022\007" +
    "\064\010\066\021\021\022\074\023\067\026\073\040\061" +
    "\043\072\001\002\000\036\027\uffcf\030\uffcf\031\uffcf\037" +
    "\105\040\077\041\110\042\100\044\076\046\111\047\101" +
    "\050\106\051\103\052\102\053\104\001\002\000\024\027" +
    "\uffcd\030\uffcd\031\uffcd\037\105\040\077\041\110\042\100" +
    "\044\uffcd\045\uffcd\001\002\000\040\027\uffd3\030\uffd3\031" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\001" +
    "\002\000\024\027\uffcc\030\uffcc\031\uffcc\037\105\040\077" +
    "\041\110\042\100\044\uffcc\045\uffcc\001\002\000\040\027" +
    "\uffd5\030\uffd5\031\uffd5\037\uffd5\040\uffd5\041\110\042\100" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\001\002\000\024\027\uffc9\030\uffc9\031\uffc9" +
    "\037\105\040\077\041\110\042\100\044\uffc9\045\uffc9\001" +
    "\002\000\024\027\uffcb\030\uffcb\031\uffcb\037\105\040\077" +
    "\041\110\042\100\044\uffcb\045\uffcb\001\002\000\024\027" +
    "\uffca\030\uffca\031\uffca\037\105\040\077\041\110\042\100" +
    "\044\uffca\045\uffca\001\002\000\024\027\uffce\030\uffce\031" +
    "\uffce\037\105\040\077\041\110\042\100\044\uffce\045\uffce" +
    "\001\002\000\040\027\uffd2\030\uffd2\031\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002\000\040\027" +
    "\uffd4\030\uffd4\031\uffd4\037\uffd4\040\uffd4\041\110\042\100" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\001\002\000\036\027\uffd0\030\uffd0\031\uffd0" +
    "\037\105\040\077\041\110\042\100\045\uffd0\046\111\047" +
    "\101\050\106\051\103\052\102\053\104\001\002\000\040" +
    "\027\uffd1\030\uffd1\031\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\001\002\000\004\021\021\001\002\000" +
    "\050\027\uffd7\030\uffd7\031\uffd7\032\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\001\002\000\022\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\025\uffdc\001\002\000\040\027\uffc8" +
    "\030\uffc8\031\uffc8\037\uffc8\040\uffc8\041\110\042\100\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\001\002\000\004\021\021\001\002\000\006\030" +
    "\137\032\130\001\002\000\006\030\uffd8\032\uffd8\001\002" +
    "\000\022\012\uffe2\013\uffe2\014\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\025\uffe2\001\002\000\022\012\uffda\013\uffda" +
    "\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda\025\uffda\001" +
    "\002\000\022\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\025\uffe5\001\002\000\022\007\064\010" +
    "\066\021\021\022\074\023\067\026\073\040\061\043\072" +
    "\001\002\000\034\027\144\037\105\040\077\041\110\042" +
    "\100\044\076\045\112\046\111\047\101\050\106\051\103" +
    "\052\102\053\104\001\002\000\004\024\145\001\002\000" +
    "\032\004\ufffb\005\ufffb\006\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\025\ufffb\001" +
    "\002\000\032\004\011\005\012\006\014\011\042\012\ufff9" +
    "\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\025" +
    "\ufff9\001\002\000\022\012\057\013\051\014\053\016\046" +
    "\017\045\020\060\021\021\025\150\001\002\000\024\012" +
    "\uffe0\013\uffe0\014\uffe0\015\151\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\025\uffe0\001\002\000\004\024\152\001\002\000" +
    "\032\004\ufffd\005\ufffd\006\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\025\ufffd\001" +
    "\002\000\032\004\011\005\012\006\014\011\013\012\ufff9" +
    "\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\025" +
    "\ufff9\001\002\000\022\012\057\013\051\014\053\016\046" +
    "\017\045\020\060\021\021\025\155\001\002\000\022\012" +
    "\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\025\uffdf\001\002\000\004\030\163\001\002\000\004\030" +
    "\162\001\002\000\022\007\064\010\066\021\021\022\074" +
    "\023\067\026\073\040\061\043\072\001\002\000\034\030" +
    "\uffd9\037\105\040\077\041\110\042\100\044\076\045\112" +
    "\046\111\047\101\050\106\051\103\052\102\053\104\001" +
    "\002\000\022\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\025\uffe4\001\002\000\022\012\uffe3\013" +
    "\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\025\uffe3" +
    "\001\002\000\022\007\064\010\066\021\021\022\074\023" +
    "\067\026\073\040\061\043\072\001\002\000\034\030\166" +
    "\037\105\040\077\041\110\042\100\044\076\045\112\046" +
    "\111\047\101\050\106\051\103\052\102\053\104\001\002" +
    "\000\022\012\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\025\uffe1\001\002\000\024\007\064\010\066" +
    "\021\021\022\074\023\067\026\073\027\172\040\061\043" +
    "\072\001\002\000\036\027\uffef\031\uffef\037\105\040\077" +
    "\041\110\042\100\044\076\045\112\046\111\047\101\050" +
    "\106\051\103\052\102\053\104\001\002\000\006\027\174" +
    "\031\173\001\002\000\040\027\ufff1\030\ufff1\031\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000" +
    "\022\007\064\010\066\021\021\022\074\023\067\026\073" +
    "\040\061\043\072\001\002\000\040\027\ufff0\030\ufff0\031" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001" +
    "\002\000\036\027\uffee\031\uffee\037\105\040\077\041\110" +
    "\042\100\044\076\045\112\046\111\047\101\050\106\051" +
    "\103\052\102\053\104\001\002\000\022\007\064\010\066" +
    "\021\021\022\074\023\067\026\073\040\061\043\072\001" +
    "\002\000\034\027\200\037\105\040\077\041\110\042\100" +
    "\044\076\045\112\046\111\047\101\050\106\051\103\052" +
    "\102\053\104\001\002\000\004\024\201\001\002\000\032" +
    "\004\ufffb\005\ufffb\006\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\025\ufffb\001\002" +
    "\000\032\004\011\005\012\006\014\011\042\012\ufff9\013" +
    "\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\025\ufff9" +
    "\001\002\000\022\012\057\013\051\014\053\016\046\017" +
    "\045\020\060\021\021\025\204\001\002\000\022\012\uffde" +
    "\013\uffde\014\uffde\016\uffde\017\uffde\020\uffde\021\uffde\025" +
    "\uffde\001\002\000\022\007\064\010\066\021\021\022\074" +
    "\023\067\026\073\040\061\043\072\001\002\000\034\027" +
    "\207\037\105\040\077\041\110\042\100\044\076\045\112" +
    "\046\111\047\101\050\106\051\103\052\102\053\104\001" +
    "\002\000\004\024\210\001\002\000\032\004\ufffb\005\ufffb" +
    "\006\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\025\ufffb\001\002\000\032\004\011" +
    "\005\012\006\014\011\042\012\ufff9\013\ufff9\014\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\025\ufff9\001\002\000\022" +
    "\012\057\013\051\014\053\016\046\017\045\020\060\021" +
    "\021\025\213\001\002\000\022\012\uffdd\013\uffdd\014\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\025\uffdd\001\002\000" +
    "\004\021\021\001\002\000\004\030\216\001\002\000\034" +
    "\002\uffe6\004\uffe6\005\uffe6\006\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\025\uffe6" +
    "\001\002\000\004\030\023\001\002\000\006\021\021\024" +
    "\221\001\002\000\012\004\011\005\012\006\014\011\042" +
    "\001\002\000\014\004\ufff3\005\ufff3\006\ufff3\011\ufff3\025" +
    "\ufff3\001\002\000\014\004\011\005\012\006\014\011\042" +
    "\025\225\001\002\000\014\004\ufff4\005\ufff4\006\ufff4\011" +
    "\ufff4\025\ufff4\001\002\000\004\030\226\001\002\000\034" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\025\ufff5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\006\002\004\003\003\001\001\000\014\004" +
    "\015\005\007\006\016\010\017\025\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\217" +
    "\001\001\000\002\001\001\000\004\026\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\023\001\001\000\002\001\001\000" +
    "\004\007\036\001\001\000\010\012\027\013\030\025\026" +
    "\001\001\000\002\001\001\000\004\026\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\032\013\030" +
    "\025\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\037\001\001\000\002\001\001" +
    "\000\010\005\042\016\043\025\040\001\001\000\004\026" +
    "\216\001\001\000\004\026\213\001\001\000\002\001\001" +
    "\000\014\017\047\020\053\021\051\023\054\026\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\064\022\062\023" +
    "\067\026\046\027\061\001\001\000\014\021\064\022\132" +
    "\023\067\026\046\027\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\064\022\126\023\067\026\046\027\061" +
    "\001\001\000\014\021\064\022\074\023\067\026\046\027" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\064\022\125\023\067\026\046\027\061\001\001\000" +
    "\014\021\064\022\124\023\067\026\046\027\061\001\001" +
    "\000\014\021\064\022\123\023\067\026\046\027\061\001" +
    "\001\000\014\021\064\022\122\023\067\026\046\027\061" +
    "\001\001\000\014\021\064\022\121\023\067\026\046\027" +
    "\061\001\001\000\014\021\064\022\120\023\067\026\046" +
    "\027\061\001\001\000\014\021\064\022\117\023\067\026" +
    "\046\027\061\001\001\000\014\021\064\022\116\023\067" +
    "\026\046\027\061\001\001\000\014\021\064\022\115\023" +
    "\067\026\046\027\061\001\001\000\002\001\001\000\014" +
    "\021\064\022\114\023\067\026\046\027\061\001\001\000" +
    "\014\021\064\022\113\023\067\026\046\027\061\001\001" +
    "\000\014\021\064\022\112\023\067\026\046\027\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\134\026\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\021\064\022" +
    "\142\023\067\026\046\027\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\145\001\001\000\010\005" +
    "\042\016\146\025\040\001\001\000\014\017\047\020\053" +
    "\021\051\023\054\026\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\152\001\001\000\016\004\015" +
    "\005\007\006\016\010\017\016\153\025\014\001\001\000" +
    "\014\017\047\020\053\021\051\023\054\026\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\064\022\160\023\067\026\046\027\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\064\022\164\023\067\026\046\027\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\064\022" +
    "\167\023\067\024\170\026\046\027\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\064\022\174\023\067\026\046\027\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\064\022\176\023" +
    "\067\026\046\027\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\201\001\001\000\010\005\042\016" +
    "\202\025\040\001\001\000\014\017\047\020\053\021\051" +
    "\023\054\026\046\001\001\000\002\001\001\000\014\021" +
    "\064\022\205\023\067\026\046\027\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\210\001\001\000" +
    "\010\005\042\016\211\025\040\001\001\000\014\017\047" +
    "\020\053\021\051\023\054\026\046\001\001\000\002\001" +
    "\001\000\004\026\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\214\001\001\000" +
    "\010\005\221\011\222\025\040\001\001\000\002\001\001" +
    "\000\006\005\223\025\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              ProgramNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode(new DeclListNode(d));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              ProgramNode RESULT =null;
		
                    parser.report_error("class_declarations","WRONG");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= declList decl 
            {
              LinkedList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclNode d = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.addLast(d);
                   RESULT = dl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<DeclNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode d = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dl.addLast(d);
                   RESULT = dl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // varDeclList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<VarDeclNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmtList ::= stmtList stmt 
            {
              LinkedList RESULT =null;
		int stLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stL = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtNode st = (StmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stL.addLast(st);
                   RESULT = stL;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtList ::= 
            {
              LinkedList RESULT =null;
		
                    RESULT = new LinkedList<StmtListNode>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= varDecl 
            {
              DeclNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= fnDecl 
            {
              DeclNode RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FnDeclNode fn = (FnDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fn;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl ::= structDecl 
            {
              DeclNode RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructDeclNode sd = (StructDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sd;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // structDecl ::= STRUCT id LCURLY structBody RCURLY SEMICOLON 
            {
              StructDeclNode RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdNode i1 = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList sb = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StructDeclNode(i1, new DeclListNode(sb));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structDecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // structBody ::= structBody varDecl 
            {
              LinkedList RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList sb = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode vD = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  sb.addLast(vD);
                    RESULT = sb;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // structBody ::= varDecl 
            {
              LinkedList RESULT =null;
		int vbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclNode vb = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<DeclNode>(Arrays.asList(vb));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structBody",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fnDecl ::= type id formals fnBody 
            {
              FnDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode id = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalsListNode fm = (FormalsListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fnBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FnBodyNode fnB = (FnBodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FnDeclNode(t, id, fm, fnB);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fncall ::= id LPAREN RPAREN 
            {
              CallExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExpNode(i, new ExpListNode(null));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fncall ::= id LPAREN actualList RPAREN 
            {
              CallExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList aL = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExpNode(i, new ExpListNode(aL));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // actualList ::= exp 
            {
              LinkedList RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<ExpNode>(Arrays.asList(exp));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // actualList ::= actualList COMMA exp 
            {
              LinkedList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList al = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  al.addLast(e);
                    RESULT = al;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formals ::= LPAREN RPAREN 
            {
              FormalsListNode RESULT =null;
		 RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formals ::= LPAREN formalsList RPAREN 
            {
              FormalsListNode RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList fm = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FormalsListNode(fm);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalsList ::= formalDecl 
            {
              LinkedList RESULT =null;
		int fmDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fmDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalDeclNode fmD = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<FormalDeclNode>(Arrays.asList(fmD));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formalsList ::= formalDecl COMMA formalsList 
            {
              LinkedList RESULT =null;
		int fmDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fmDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalDeclNode fmD = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fLright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList fL = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  fL.push(fmD);
                    RESULT = fL;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formalDecl ::= type id 
            {
              FormalDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode d = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FormalDeclNode(t, d);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              FnBodyNode RESULT =null;
		int vDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vD = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stmtL = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FnBodyNode(new DeclListNode(vD), new StmtListNode(stmtL));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fnBody",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // varDecl ::= type id SEMICOLON 
            {
              VarDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // varDecl ::= STRUCT id id SEMICOLON 
            {
              VarDeclNode RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode id1 = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode id2 = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(new StructNode(id1),id2, 0);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= assignExp SEMICOLON 
            {
              StmtNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignNode ae = (AssignNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignStmtNode(ae);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= loc PLUSPLUS SEMICOLON 
            {
              StmtNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostIncStmtNode(l);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= loc MINUSMINUS SEMICOLON 
            {
              StmtNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostDecStmtNode(l);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= CIN READ loc SEMICOLON 
            {
              StmtNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadStmtNode(l);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= COUT WRITE exp SEMICOLON 
            {
              StmtNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteStmtNode(exp);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vD = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stmtL = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmtNode(exp1, new DeclListNode(vD), new StmtListNode(stmtL));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY declList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vD1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vD1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList vD1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int stmtL1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int stmtL1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList stmtL1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vD2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vD2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vD2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtL2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtL2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stmtL2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseStmtNode(exp1,
                        new DeclListNode(vD1), new StmtListNode(stmtL1),
                        new DeclListNode(vD2), new StmtListNode(stmtL2));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vD = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stmtL = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmtNode(exp1, new DeclListNode(vD), new StmtListNode(stmtL));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= REPEAT LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList vD = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList stmtL = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RepeatStmtNode(exp1, new DeclListNode(vD), new StmtListNode(stmtL));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= RETURN exp SEMICOLON 
            {
              StmtNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode exp = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmtNode(exp);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= RETURN SEMICOLON 
            {
              StmtNode RESULT =null;
		 RESULT = new ReturnStmtNode(null);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= fncall SEMICOLON 
            {
              StmtNode RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallExpNode call = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmtNode(call);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignExp ::= loc ASSIGN exp 
            {
              AssignNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode ex = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignNode(l, ex);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignExp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // loc ::= id 
            {
              ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // loc ::= loc DOT id 
            {
              ExpNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DotAccessExpNode(l, i);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= term 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp PLUS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusNode(exp1, exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MINUS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusNode(exp1, exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp TIMES exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimesNode(exp1, exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp DIVIDE exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivideNode(exp1, exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= NOT exp 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotNode(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp AND exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndNode(exp1,exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp OR exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrNode(exp1,exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp NOTEQUALS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqualsNode(exp1,exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp EQUALS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualsNode(exp1,exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp LESS exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessNode(exp1,exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp GREATER exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterNode(exp1,exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp LESSEQ exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessEqNode(exp1,exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp GREATEREQ exp 
            {
              ExpNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode exp1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode exp2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterEqNode(exp1,exp2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= MINUS exp 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryMinusNode(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= INTLITERAL 
            {
              ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLitTokenVal i = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= STRINGLITERAL 
            {
              ExpNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StrLitTokenVal s = (StrLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= TRUE 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenVal t = (TokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TrueNode(t.linenum, t.charnum);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= FALSE 
            {
              ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenVal t = (TokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FalseNode(t.linenum, t.charnum);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= LPAREN exp RPAREN 
            {
              ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= fncall 
            {
              ExpNode RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallExpNode call = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= loc 
            {
              ExpNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpNode l = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= INT 
            {
              TypeNode RESULT =null;
		 RESULT = new IntNode();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= BOOL 
            {
              TypeNode RESULT =null;
		 RESULT = new BoolNode();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= VOID 
            {
              TypeNode RESULT =null;
		 RESULT = new VoidNode();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // id ::= ID 
            {
              IdNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdTokenVal i = (IdTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
